// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/internal/proto/examplepb/stream.proto

package examplepb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	sub "github.com/grpc-ecosystem/grpc-gateway/examples/internal/proto/sub"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("examples/internal/proto/examplepb/stream.proto", fileDescriptor_cc5dba844cf4f624)
}

var fileDescriptor_cc5dba844cf4f624 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x89, 0x8a, 0xe8, 0x89, 0x4b, 0x06, 0x87, 0x53, 0x10, 0x0f, 0xc1, 0x56, 0x21, 0x69,
	0x15, 0x1c, 0xea, 0x64, 0xa5, 0x9b, 0xe2, 0xd0, 0xcd, 0xa5, 0x24, 0xc7, 0xdb, 0x34, 0xf4, 0x2e,
	0x39, 0x92, 0x5c, 0xb5, 0x88, 0x8b, 0xe0, 0x27, 0xe8, 0xd7, 0xf0, 0xdb, 0xb8, 0x3a, 0xfa, 0x41,
	0xa4, 0xb9, 0x3f, 0x93, 0xe5, 0x14, 0xc7, 0x7b, 0xdf, 0x7b, 0xde, 0xfc, 0x7e, 0x4f, 0x40, 0xe0,
	0x89, 0xa5, 0x59, 0x02, 0x96, 0x4a, 0xe5, 0xc0, 0x28, 0x96, 0xd0, 0xcc, 0x68, 0xa7, 0x69, 0x39,
	0xcf, 0x38, 0xb5, 0xce, 0x00, 0x4b, 0x89, 0x1f, 0xe3, 0x96, 0x30, 0x59, 0x4c, 0x04, 0x73, 0xf0,
	0xc8, 0xe6, 0x75, 0x98, 0x54, 0x61, 0x52, 0xc7, 0xc2, 0x03, 0xa1, 0xb5, 0x48, 0x80, 0xb2, 0x4c,
	0x52, 0xa6, 0x94, 0x76, 0xcc, 0x49, 0xad, 0x6c, 0x71, 0x27, 0xdc, 0x2f, 0xb7, 0xfe, 0x8b, 0xe7,
	0x63, 0x0a, 0x69, 0xe6, 0xe6, 0xe5, 0xf2, 0xaa, 0x19, 0x8a, 0x8d, 0xb8, 0x74, 0x23, 0x3d, 0x1e,
	0xc1, 0x0c, 0xcc, 0xdc, 0x4d, 0xa4, 0x12, 0x65, 0xb8, 0xbd, 0x2a, 0x6c, 0x73, 0x4e, 0x53, 0xb0,
	0x96, 0x09, 0x28, 0x7e, 0x3d, 0xff, 0x5c, 0x0f, 0x76, 0x87, 0xde, 0x6e, 0x08, 0x66, 0x26, 0x63,
	0xc0, 0x0b, 0x14, 0x04, 0xfd, 0x3c, 0x99, 0xde, 0x18, 0x60, 0x0e, 0x70, 0x8f, 0xfc, 0x56, 0x97,
	0x5c, 0xf7, 0xa5, 0xbb, 0x1f, 0x0f, 0x6a, 0x9a, 0x70, 0x8f, 0x14, 0x8a, 0xa4, 0x52, 0x24, 0x83,
	0xa5, 0x62, 0x44, 0x5f, 0x3f, 0xbe, 0x16, 0x6b, 0xed, 0xe8, 0x98, 0xce, 0xba, 0x95, 0xd0, 0x4f,
	0x3a, 0x94, 0xe7, 0xc9, 0xb4, 0x87, 0x4e, 0x5b, 0x08, 0xbf, 0xa1, 0x60, 0xe3, 0x56, 0x5a, 0x87,
	0x57, 0xdc, 0x0c, 0xff, 0xc1, 0x19, 0x9d, 0x78, 0x9e, 0x23, 0x7c, 0xd8, 0xc0, 0xd3, 0x41, 0xf8,
	0x1d, 0x05, 0x5b, 0xcb, 0x76, 0x06, 0xf1, 0x44, 0xe3, 0x6e, 0xd3, 0x9b, 0x36, 0xe7, 0x64, 0xe8,
	0x8c, 0x54, 0xe2, 0xae, 0x68, 0x3d, 0xfc, 0x7b, 0x24, 0xba, 0xf4, 0x74, 0x9d, 0xe8, 0xac, 0xa9,
	0x2d, 0x88, 0x27, 0x9a, 0x3e, 0x2b, 0x96, 0xc2, 0x8b, 0x2f, 0xad, 0x83, 0xfa, 0x3b, 0x0f, 0xdb,
	0xb5, 0x37, 0xdf, 0xf4, 0x95, 0x5d, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff, 0xed, 0x5f, 0x4b, 0xfd,
	0xf1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error)
	BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) BulkCreate(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkCreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/grpc.gateway.examples.internal.examplepb.StreamService/BulkCreate", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkCreateClient{stream}
	return x, nil
}

type StreamService_BulkCreateClient interface {
	Send(*ABitOfEverything) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type streamServiceBulkCreateClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkCreateClient) Send(m *ABitOfEverything) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkCreateClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (StreamService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[1], "/grpc.gateway.examples.internal.examplepb.StreamService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ListClient interface {
	Recv() (*ABitOfEverything, error)
	grpc.ClientStream
}

type streamServiceListClient struct {
	grpc.ClientStream
}

func (x *streamServiceListClient) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) BulkEcho(ctx context.Context, opts ...grpc.CallOption) (StreamService_BulkEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[2], "/grpc.gateway.examples.internal.examplepb.StreamService/BulkEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBulkEchoClient{stream}
	return x, nil
}

type StreamService_BulkEchoClient interface {
	Send(*sub.StringMessage) error
	Recv() (*sub.StringMessage, error)
	grpc.ClientStream
}

type streamServiceBulkEchoClient struct {
	grpc.ClientStream
}

func (x *streamServiceBulkEchoClient) Send(m *sub.StringMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBulkEchoClient) Recv() (*sub.StringMessage, error) {
	m := new(sub.StringMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	BulkCreate(StreamService_BulkCreateServer) error
	List(*empty.Empty, StreamService_ListServer) error
	BulkEcho(StreamService_BulkEchoServer) error
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) BulkCreate(srv StreamService_BulkCreateServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}
func (*UnimplementedStreamServiceServer) List(req *empty.Empty, srv StreamService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedStreamServiceServer) BulkEcho(srv StreamService_BulkEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkEcho not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_BulkCreate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BulkCreate(&streamServiceBulkCreateServer{stream})
}

type StreamService_BulkCreateServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ABitOfEverything, error)
	grpc.ServerStream
}

type streamServiceBulkCreateServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkCreateServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkCreateServer) Recv() (*ABitOfEverything, error) {
	m := new(ABitOfEverything)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).List(m, &streamServiceListServer{stream})
}

type StreamService_ListServer interface {
	Send(*ABitOfEverything) error
	grpc.ServerStream
}

type streamServiceListServer struct {
	grpc.ServerStream
}

func (x *streamServiceListServer) Send(m *ABitOfEverything) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_BulkEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BulkEcho(&streamServiceBulkEchoServer{stream})
}

type StreamService_BulkEchoServer interface {
	Send(*sub.StringMessage) error
	Recv() (*sub.StringMessage, error)
	grpc.ServerStream
}

type streamServiceBulkEchoServer struct {
	grpc.ServerStream
}

func (x *streamServiceBulkEchoServer) Send(m *sub.StringMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBulkEchoServer) Recv() (*sub.StringMessage, error) {
	m := new(sub.StringMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.internal.examplepb.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkCreate",
			Handler:       _StreamService_BulkCreate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _StreamService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkEcho",
			Handler:       _StreamService_BulkEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "examples/internal/proto/examplepb/stream.proto",
}
