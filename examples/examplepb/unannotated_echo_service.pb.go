// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/examplepb/unannotated_echo_service.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// UnannotatedSimpleMessage represents a simple message sent to the unannotated Echo service.
type UnannotatedSimpleMessage struct {
	// Id represents the message identifier.
	Id       string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Num      int64                      `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Duration *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *UnannotatedSimpleMessage) Reset()                    { *m = UnannotatedSimpleMessage{} }
func (m *UnannotatedSimpleMessage) String() string            { return proto.CompactTextString(m) }
func (*UnannotatedSimpleMessage) ProtoMessage()               {}
func (*UnannotatedSimpleMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *UnannotatedSimpleMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UnannotatedSimpleMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *UnannotatedSimpleMessage) GetDuration() *google_protobuf2.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func init() {
	proto.RegisterType((*UnannotatedSimpleMessage)(nil), "grpc.gateway.examples.examplepb.UnannotatedSimpleMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UnannotatedEchoService service

type UnannotatedEchoServiceClient interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(ctx context.Context, in *UnannotatedSimpleMessage, opts ...grpc.CallOption) (*UnannotatedSimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, opts ...grpc.CallOption) (*UnannotatedSimpleMessage, error)
}

type unannotatedEchoServiceClient struct {
	cc *grpc.ClientConn
}

func NewUnannotatedEchoServiceClient(cc *grpc.ClientConn) UnannotatedEchoServiceClient {
	return &unannotatedEchoServiceClient{cc}
}

func (c *unannotatedEchoServiceClient) Echo(ctx context.Context, in *UnannotatedSimpleMessage, opts ...grpc.CallOption) (*UnannotatedSimpleMessage, error) {
	out := new(UnannotatedSimpleMessage)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.UnannotatedEchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unannotatedEchoServiceClient) EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, opts ...grpc.CallOption) (*UnannotatedSimpleMessage, error) {
	out := new(UnannotatedSimpleMessage)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.UnannotatedEchoService/EchoBody", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnannotatedEchoService service

type UnannotatedEchoServiceServer interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(context.Context, *UnannotatedSimpleMessage) (*UnannotatedSimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(context.Context, *UnannotatedSimpleMessage) (*UnannotatedSimpleMessage, error)
}

func RegisterUnannotatedEchoServiceServer(s *grpc.Server, srv UnannotatedEchoServiceServer) {
	s.RegisterService(&_UnannotatedEchoService_serviceDesc, srv)
}

func _UnannotatedEchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnannotatedSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnannotatedEchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.UnannotatedEchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnannotatedEchoServiceServer).Echo(ctx, req.(*UnannotatedSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnannotatedEchoService_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnannotatedSimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnannotatedEchoServiceServer).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.UnannotatedEchoService/EchoBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnannotatedEchoServiceServer).EchoBody(ctx, req.(*UnannotatedSimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnannotatedEchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.UnannotatedEchoService",
	HandlerType: (*UnannotatedEchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _UnannotatedEchoService_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _UnannotatedEchoService_EchoBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/examplepb/unannotated_echo_service.proto",
}

func init() { proto.RegisterFile("examples/examplepb/unannotated_echo_service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x87, 0x32, 0x0a, 0x92, 0xf4, 0x4b, 0xf3, 0x12, 0xf3, 0xf2, 0xf2,
	0x4b, 0x12, 0x4b, 0x52, 0x53, 0xe2, 0x53, 0x93, 0x33, 0xf2, 0xe3, 0x8b, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xe4, 0xd3, 0x8b, 0x0a, 0x92, 0xf5, 0xd2,
	0x13, 0x4b, 0x52, 0xcb, 0x13, 0x2b, 0xf5, 0x60, 0xfa, 0xf5, 0xe0, 0xfa, 0xa5, 0xe4, 0xd2, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xca, 0x93, 0x4a, 0xd3, 0xf4, 0x53, 0x4a, 0x8b, 0x12, 0x4b,
	0x32, 0xf3, 0xf3, 0x20, 0x06, 0x28, 0x15, 0x73, 0x49, 0x84, 0x22, 0xac, 0x08, 0xce, 0x04, 0x69,
	0xf3, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd, 0x95, 0x60,
	0x52, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0x31, 0x85, 0x4c, 0xb9, 0x38, 0x60, 0xe6, 0x49, 0x30, 0x2b,
	0x30, 0x6a, 0x70, 0x1b, 0x49, 0xea, 0x41, 0x2c, 0xd4, 0x83, 0x59, 0xa8, 0xe7, 0x02, 0x55, 0x10,
	0x04, 0x57, 0x6a, 0x34, 0x93, 0x89, 0x4b, 0x0c, 0xc9, 0x56, 0xd7, 0xe4, 0x8c, 0xfc, 0x60, 0x88,
	0xb7, 0x84, 0x6a, 0xb8, 0x58, 0x40, 0x5c, 0x21, 0x4b, 0x3d, 0x02, 0x3e, 0xd3, 0xc3, 0xe5, 0x6c,
	0x29, 0xf2, 0xb5, 0x0a, 0x35, 0x30, 0x72, 0x71, 0x80, 0xac, 0x77, 0xca, 0x4f, 0xa9, 0x1c, 0x18,
	0x27, 0x38, 0x71, 0x47, 0x71, 0xc2, 0x55, 0x25, 0xb1, 0x81, 0x43, 0xd1, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0xb1, 0xa5, 0x75, 0x1a, 0x02, 0x00, 0x00,
}
