// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/examplepb/simple.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SimpleResponse struct {
	SimpleMessage string `protobuf:"bytes,1,opt,name=simple_message,json=simpleMessage" json:"simple_message,omitempty"`
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *SimpleResponse) GetSimpleMessage() string {
	if m != nil {
		return m.SimpleMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleResponse)(nil), "grpc.gateway.examples.examplepb.SimpleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SimpleRequest service

type SimpleRequestClient interface {
	SimpleGet(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type simpleRequestClient struct {
	cc *grpc.ClientConn
}

func NewSimpleRequestClient(cc *grpc.ClientConn) SimpleRequestClient {
	return &simpleRequestClient{cc}
}

func (c *simpleRequestClient) SimpleGet(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.examples.examplepb.SimpleRequest/SimpleGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SimpleRequest service

type SimpleRequestServer interface {
	SimpleGet(context.Context, *google_protobuf1.Empty) (*SimpleResponse, error)
}

func RegisterSimpleRequestServer(s *grpc.Server, srv SimpleRequestServer) {
	s.RegisterService(&_SimpleRequest_serviceDesc, srv)
}

func _SimpleRequest_SimpleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleRequestServer).SimpleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.SimpleRequest/SimpleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleRequestServer).SimpleGet(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SimpleRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.SimpleRequest",
	HandlerType: (*SimpleRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleGet",
			Handler:    _SimpleRequest_SimpleGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/examplepb/simple.proto",
}

func init() { proto.RegisterFile("examples/examplepb/simple.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x87, 0x32, 0x0a, 0x92, 0xf4, 0x8b, 0x33, 0x41, 0x0c, 0xbd, 0x82,
	0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xf9, 0xf4, 0xa2, 0x82, 0x64, 0xbd, 0xf4, 0xc4, 0x92, 0xd4, 0xf2,
	0xc4, 0x4a, 0x3d, 0x98, 0x6a, 0x3d, 0xb8, 0x6a, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54,
	0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62,
	0x88, 0x76, 0x29, 0x69, 0xa8, 0x2c, 0x98, 0x97, 0x54, 0x9a, 0xa6, 0x9f, 0x9a, 0x5b, 0x50, 0x52,
	0x09, 0x91, 0x54, 0x32, 0xe7, 0xe2, 0x0b, 0x06, 0xdb, 0x15, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57,
	0x9c, 0x2a, 0xa4, 0xca, 0xc5, 0x07, 0xb1, 0x3d, 0x3e, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0x17, 0x22, 0xea, 0x0b, 0x11, 0x34, 0x2a, 0xe3, 0xe2,
	0x85, 0x69, 0x2c, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x4a, 0xe5, 0xe2, 0x84, 0x08, 0xb8, 0xa7, 0x96,
	0x08, 0x89, 0xe9, 0x41, 0x2c, 0xd5, 0x83, 0x59, 0xaa, 0xe7, 0x0a, 0xb2, 0x54, 0x4a, 0x5f, 0x8f,
	0x80, 0x5f, 0xf4, 0x50, 0x5d, 0xa3, 0xc4, 0xdf, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x4e, 0x21, 0x76,
	0xfd, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x27, 0xee, 0x28, 0x4e, 0xb8, 0xe2, 0x24, 0x36, 0xb0,
	0xf1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0x52, 0x13, 0x59, 0x43, 0x01, 0x00, 0x00,
}
